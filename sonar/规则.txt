自定义规则格式：
@Rule(key = "BraceRule")
@RspecKey("BraceRule")
public class BraceRule extends IssuableSubscriptionVisitor {
    @Override
    public List<Tree.Kind> nodesToVisit() {
        return ImmutableList.of(Tree.Kind.BLOCK);
    }

    @Override
    public void visitNode(Tree tree) {
        if (tree instanceof BlockTree) {
            BlockTree blockTree = (BlockTree) tree;
            if (blockTree.parent() instanceof MethodTree) {
                //方法中blockTree为空
                if (blockTree.body().size() == 0) {
                    //开大括号 { 行号
                    int openLine = blockTree.openBraceToken().line();
                    //闭大括号 } 行号
                    int closeLine = blockTree.closeBraceToken().line();
                    if (openLine != closeLine)
                        reportIssue(tree, "空的方法体左大括号右大括号应该在一行");
                }
            }
        }
    }
}


测试类格式：
public class BraceTest {
    @Test
    public void test() {
        JavaCheckVerifier.verify("C:\\Users\\zhengyi\\Desktop\\SonarTest\\src\\test\\BraceRule.java", new BraceRule());
    }
}
测试用的类自己编写，后面为判定规则

增加新规则后，在resources/org.sonar.l10n.java.rules.squid下增加相应的html和json文件。在RulesList和MyJavaFileCheckRegistar中添加相应条目。

ArrayDeclarationRule判断数组声明括号的位置是否合理、函数返回数组括号的位置是否合理
		([ 符号 的行号 小于 数组变量名行号,或者 同一行但是变量名 在 [ 前面)；
						
IfElseStatementBlockRule判断if体是否使用大括号包裹、if闭括号是否与else关键字位于同一行、
		else体是否使用大括号包裹(if (elseStatementTree instanceof BlockTree == false))；
			
AssertMentRule判断断言中是否有业务处理（方法调用），检查判断条件中是否有方法调用，a.equals(b)也是方法调用；

AssignmentRule判断是否有复杂的赋值语句（赋值表达式的父级是否还是赋值表达式或变量声明语句），
		判定边界条件（父级是注解、Block、Lambda表达式），到达边界就不用再判断了；
					
BinaryStatementRule判断二元操作表达式是否需要加括号以明确优先级，用 & ^ | 等符号连接的，一定要加括号（混合操作会影响结果），
		用&& ||连接的，如果二元表达式的操作符不是&& ||的需要加括号；
						
BraceRule大括号规则，方法体为空，大括号不换行。判断block的父级是否是方法，再判断block的body是否为空；

ClassCommentRule类和接口的注释，使用javadoc风格。关注类、注解类型、接口、枚举类等ClassTree结构。
		找到第一个token，递归查找它的父级，看是否在方法内，直到找到MethodTree类型或者null，
		如果找到MethodTree类型，判断它的第一个token和上面的token是不是同一个token，是返回false，不是返回true。
		如果是方法内部类忽略，否则找到类的注释(SyntaxToken.trivias())，看最后一个注释是不是以"/**"开头。
				
ClassCouplingRule判断类的聚合程度是否超过20，匿名内部类不用管。继承的类、实现的接口、类的泛型参数都算一个依赖。
				声明的成员变量类型、new语句的泛型参数、参数算一个依赖。类型转换要转换成的类也是一个依赖。
				方法的泛型参数、返回值、参数，集合类型，instanceof指向的类型。
				
ClassNameRule类名使用UpperCamelCase风格。首尾字符不能是下划线或$，且符合正则表达式"^[A-Z][a-zA-Z0-9]*$"。
				其实只要首字母是大写,不包含_和$就符合要求，无法界定单词边界。
				
ClearNumbericTypeRule明确数值类型float加f，double加d，long加L。variableTree的赋值表达式是LiteralTree（字面量）才需要判断。
				只检查了变量声明语句variabletree。0无需后缀。

ConstantNameRule检查常量命名规则，全部字母大写。符合正则表达式"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"。
				如果类、接口、注解(ClassTree)的成员变量类型是八大基本类型及其包装类或者字符串，且使用static，final修饰，
				或者成员是ENUM_CONSTANT类型，就是个常量，serialVersionUID除外。
